<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classimage__transport_1_1_simple_publisher_plugin" kind="class" prot="public" abstract="yes">
    <compoundname>image_transport::SimplePublisherPlugin</compoundname>
    <basecompoundref refid="classimage__transport_1_1_publisher_plugin" prot="public" virt="non-virtual">image_transport::PublisherPlugin</basecompoundref>
    <includes refid="simple__publisher__plugin_8h" local="no">simple_publisher_plugin.h</includes>
    <innerclass refid="structimage__transport_1_1_simple_publisher_plugin_1_1_simple_publisher_plugin_impl" prot="private">image_transport::SimplePublisherPlugin::SimplePublisherPluginImpl</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>M</declname>
        <defname>M</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classimage__transport_1_1_simple_publisher_plugin_1a01bd11cb3ee6b7ce6715a3b57feadf93" prot="protected" static="no">
        <type>boost::function&lt; void(const M &amp;)&gt;</type>
        <definition>typedef boost::function&lt;void(const M&amp;)&gt; image_transport::SimplePublisherPlugin&lt; M &gt;::PublishFn</definition>
        <argsstring></argsstring>
        <name>PublishFn</name>
        <briefdescription>
<para>Generic function for publishing the internal message type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="109" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classimage__transport_1_1_simple_publisher_plugin_1ad14bbf5e45e654efb7e5275624e8d50b" prot="private" static="no">
        <type>void(SimplePublisherPlugin::*</type>
        <definition>typedef void(SimplePublisherPlugin::* image_transport::SimplePublisherPlugin&lt; M &gt;::SubscriberStatusMemFn)(const ros::SingleSubscriberPublisher &amp;pub)</definition>
        <argsstring>)(const ros::SingleSubscriberPublisher &amp;pub)</argsstring>
        <name>SubscriberStatusMemFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="179" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classimage__transport_1_1_simple_publisher_plugin_1a69e45772f0e7f53b10fce68a507ecee7" prot="private" static="no">
        <type>boost::function&lt; void(const sensor_msgs::Image &amp;)&gt;</type>
        <definition>typedef boost::function&lt;void(const sensor_msgs::Image&amp;)&gt; image_transport::SimplePublisherPlugin&lt; M &gt;::ImagePublishFn</definition>
        <argsstring></argsstring>
        <name>ImagePublishFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="220" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classimage__transport_1_1_simple_publisher_plugin_1acc2b8e5b1d487fd75d910ae91b1c67ca" prot="private" static="no" mutable="no">
        <type>boost::scoped_ptr&lt; SimplePublisherPluginImpl &gt;</type>
        <definition>boost::scoped_ptr&lt;SimplePublisherPluginImpl&gt; image_transport::SimplePublisherPlugin&lt; M &gt;::simple_impl_</definition>
        <argsstring></argsstring>
        <name>simple_impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="177" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1a755bf0cb92fd491596736feae2c8c454" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual image_transport::SimplePublisherPlugin&lt; M &gt;::~SimplePublisherPlugin</definition>
        <argsstring>()</argsstring>
        <name>~SimplePublisherPlugin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="64" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1a58697b43b16d32531b4f67a7c8709f20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t image_transport::SimplePublisherPlugin&lt; M &gt;::getNumSubscribers</definition>
        <argsstring>() const </argsstring>
        <name>getNumSubscribers</name>
        <reimplements refid="classimage__transport_1_1_publisher_plugin_1a10afba12d403ba21536610fce596c856">getNumSubscribers</reimplements>
        <briefdescription>
<para>Returns the number of subscribers that are currently connected to this <ref refid="classimage__transport_1_1_publisher_plugin" kindref="compound">PublisherPlugin</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="66" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1a24f9923dbde675f1693b1be252805918" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string image_transport::SimplePublisherPlugin&lt; M &gt;::getTopic</definition>
        <argsstring>() const </argsstring>
        <name>getTopic</name>
        <reimplements refid="classimage__transport_1_1_publisher_plugin_1ac00807561a7e3406472273b85f1036e8">getTopic</reimplements>
        <briefdescription>
<para>Returns the communication topic that this <ref refid="classimage__transport_1_1_publisher_plugin" kindref="compound">PublisherPlugin</ref> will publish on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="72" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1a409f2078d4aa3466e843404b88cfe101" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void image_transport::SimplePublisherPlugin&lt; M &gt;::publish</definition>
        <argsstring>(const sensor_msgs::Image &amp;message) const </argsstring>
        <name>publish</name>
        <reimplements refid="classimage__transport_1_1_publisher_plugin_1a9c17e85717c5478011c944998d9f1bff">publish</reimplements>
        <param>
          <type>const sensor_msgs::Image &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Publish an image using the transport associated with this <ref refid="classimage__transport_1_1_publisher_plugin" kindref="compound">PublisherPlugin</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="78" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="78" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1a62e2d4cce1756530fbf6a323b1a00c59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void image_transport::SimplePublisherPlugin&lt; M &gt;::shutdown</definition>
        <argsstring>()</argsstring>
        <name>shutdown</name>
        <reimplements refid="classimage__transport_1_1_publisher_plugin_1aebf86857a6453919807061565f8837d2">shutdown</reimplements>
        <briefdescription>
<para>Shutdown any advertisements associated with this <ref refid="classimage__transport_1_1_publisher_plugin" kindref="compound">PublisherPlugin</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="88" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="88" bodyend="91"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1af9ca774ef9d18a9cf745c92762c00d91" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void image_transport::SimplePublisherPlugin&lt; M &gt;::advertiseImpl</definition>
        <argsstring>(ros::NodeHandle &amp;nh, const std::string &amp;base_topic, uint32_t queue_size, const SubscriberStatusCallback &amp;user_connect_cb, const SubscriberStatusCallback &amp;user_disconnect_cb, const ros::VoidPtr &amp;tracked_object, bool latch)</argsstring>
        <name>advertiseImpl</name>
        <reimplements refid="classimage__transport_1_1_publisher_plugin_1ab6452043d8f51ed52638abf470aa4884">advertiseImpl</reimplements>
        <param>
          <type>ros::NodeHandle &amp;</type>
          <declname>nh</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>base_topic</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>queue_size</declname>
        </param>
        <param>
          <type>const SubscriberStatusCallback &amp;</type>
          <declname>connect_cb</declname>
        </param>
        <param>
          <type>const SubscriberStatusCallback &amp;</type>
          <declname>disconnect_cb</declname>
        </param>
        <param>
          <type>const ros::VoidPtr &amp;</type>
          <declname>tracked_object</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>latch</declname>
        </param>
        <briefdescription>
<para>Advertise a topic. Must be implemented by the subclass. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="94" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="94" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1a193470dd32092d13e2284052d4fa359a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void image_transport::SimplePublisherPlugin&lt; M &gt;::publish</definition>
        <argsstring>(const sensor_msgs::Image &amp;message, const PublishFn &amp;publish_fn) const =0</argsstring>
        <name>publish</name>
        <reimplementedby refid="class_resized_publisher_1af0121f511226071f7cb96fb3e50879a6">publish</reimplementedby>
        <reimplementedby refid="classimage__transport_1_1_raw_publisher_1a5d82f75d47a79f1df0be82165398e8fa">publish</reimplementedby>
        <param>
          <type>const sensor_msgs::Image &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const <ref refid="classimage__transport_1_1_simple_publisher_plugin_1a01bd11cb3ee6b7ce6715a3b57feadf93" kindref="member">PublishFn</ref> &amp;</type>
          <declname>publish_fn</declname>
        </param>
        <briefdescription>
<para>Publish an image using the specified publish function. Must be implemented by the subclass. </para>        </briefdescription>
        <detaileddescription>
<para>The PublishFn publishes the transport-specific message type. This indirection allows <ref refid="classimage__transport_1_1_simple_subscriber_plugin" kindref="compound">SimpleSubscriberPlugin</ref> to use this function for both normal broadcast publishing and single subscriber publishing (in subscription callbacks). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1a46df2b43de62c169d28ac510010d032f" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string image_transport::SimplePublisherPlugin&lt; M &gt;::getTopicToAdvertise</definition>
        <argsstring>(const std::string &amp;base_topic) const </argsstring>
        <name>getTopicToAdvertise</name>
        <reimplementedby refid="classimage__transport_1_1_raw_publisher_1a18a9e588fde64cffdf43a3cebba7b471">getTopicToAdvertise</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>base_topic</declname>
        </param>
        <briefdescription>
<para>Return the communication topic name for a given base topic. </para>        </briefdescription>
        <detaileddescription>
<para>Defaults to &lt;base topic&gt;/&lt;transport name&gt;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="126" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1a4329bd192aa03ec8b44e52c6bbe91a11" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void image_transport::SimplePublisherPlugin&lt; M &gt;::connectCallback</definition>
        <argsstring>(const ros::SingleSubscriberPublisher &amp;pub)</argsstring>
        <name>connectCallback</name>
        <param>
          <type>const ros::SingleSubscriberPublisher &amp;</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Function called when a subscriber connects to the internal publisher. </para>        </briefdescription>
        <detaileddescription>
<para>Defaults to noop. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="136" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1ac02aac90a3a159c1450a298b63a37425" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void image_transport::SimplePublisherPlugin&lt; M &gt;::disconnectCallback</definition>
        <argsstring>(const ros::SingleSubscriberPublisher &amp;pub)</argsstring>
        <name>disconnectCallback</name>
        <param>
          <type>const ros::SingleSubscriberPublisher &amp;</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Function called when a subscriber disconnects from the internal publisher. </para>        </briefdescription>
        <detaileddescription>
<para>Defaults to noop. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="143" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1a5f73a993e871242e51671f3cf82d4e1b" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ros::NodeHandle &amp;</type>
        <definition>const ros::NodeHandle&amp; image_transport::SimplePublisherPlugin&lt; M &gt;::nh</definition>
        <argsstring>() const </argsstring>
        <name>nh</name>
        <briefdescription>
<para>Returns the ros::NodeHandle to be used for parameter lookup. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="148" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1a11ad943c96711dc4a797a2b577ae9ea3" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ros::Publisher &amp;</type>
        <definition>const ros::Publisher&amp; image_transport::SimplePublisherPlugin&lt; M &gt;::getPublisher</definition>
        <argsstring>() const </argsstring>
        <name>getPublisher</name>
        <briefdescription>
<para>Returns the internal ros::Publisher. </para>        </briefdescription>
        <detaileddescription>
<para>This really only exists so <ref refid="classimage__transport_1_1_raw_publisher" kindref="compound">RawPublisher</ref> can implement no-copy intraprocess message passing easily. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="159" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="159" bodyend="163"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1ad3a066469d5206d45e43080b26540d2f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ros::SubscriberStatusCallback</type>
        <definition>ros::SubscriberStatusCallback image_transport::SimplePublisherPlugin&lt; M &gt;::bindCB</definition>
        <argsstring>(const SubscriberStatusCallback &amp;user_cb, SubscriberStatusMemFn internal_cb_fn)</argsstring>
        <name>bindCB</name>
        <param>
          <type>const SubscriberStatusCallback &amp;</type>
          <declname>user_cb</declname>
        </param>
        <param>
          <type>SubscriberStatusMemFn</type>
          <declname>internal_cb_fn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Binds the user callback to subscriberCB(), which acts as an intermediary to expose a publish(Image) interface to the user while publishing to an internal topic. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="185" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="185" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1a1ca1e6780314d0bb7d9c21832e965005" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void image_transport::SimplePublisherPlugin&lt; M &gt;::subscriberCB</definition>
        <argsstring>(const ros::SingleSubscriberPublisher &amp;ros_ssp, const SubscriberStatusCallback &amp;user_cb, const ros::SubscriberStatusCallback &amp;internal_cb)</argsstring>
        <name>subscriberCB</name>
        <param>
          <type>const ros::SingleSubscriberPublisher &amp;</type>
          <declname>ros_ssp</declname>
        </param>
        <param>
          <type>const SubscriberStatusCallback &amp;</type>
          <declname>user_cb</declname>
        </param>
        <param>
          <type>const ros::SubscriberStatusCallback &amp;</type>
          <declname>internal_cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forms the ros::SingleSubscriberPublisher for the internal communication topic into an <ref refid="classimage__transport_1_1_single_subscriber_publisher" kindref="compound">image_transport::SingleSubscriberPublisher</ref> for Image messages and passes it to the user subscriber status callback. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="200" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="200" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classimage__transport_1_1_simple_publisher_plugin_1adf52732e6fae666b89af0130ccf56a74" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PubT</type>
          </param>
        </templateparamlist>
        <type><ref refid="classimage__transport_1_1_simple_publisher_plugin_1a01bd11cb3ee6b7ce6715a3b57feadf93" kindref="member">PublishFn</ref></type>
        <definition>PublishFn image_transport::SimplePublisherPlugin&lt; M &gt;::bindInternalPublisher</definition>
        <argsstring>(const PubT &amp;pub) const </argsstring>
        <name>bindInternalPublisher</name>
        <param>
          <type>const PubT &amp;</type>
          <declname>pub</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a function object for publishing the transport-specific message type through some ROS publisher type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>An object with method void publish(const M&amp;) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="229" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="229" bodyend="235"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class to simplify implementing most plugins to <ref refid="classimage__transport_1_1_publisher" kindref="compound">Publisher</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>This base class vastly simplifies implementing a <ref refid="classimage__transport_1_1_publisher_plugin" kindref="compound">PublisherPlugin</ref> in the common case that all communication with the matching <ref refid="classimage__transport_1_1_subscriber_plugin" kindref="compound">SubscriberPlugin</ref> happens over a single ROS topic using a transport-specific message type. <ref refid="classimage__transport_1_1_simple_publisher_plugin" kindref="compound">SimplePublisherPlugin</ref> is templated on the transport-specific message type.</para><para>A subclass need implement only two methods:<itemizedlist>
<listitem><para><ref refid="classimage__transport_1_1_publisher_plugin_1abe0cd36dc3c170adb6aec8bc6d81d52e" kindref="member">getTransportName()</ref> from <ref refid="classimage__transport_1_1_publisher_plugin" kindref="compound">PublisherPlugin</ref></para></listitem><listitem><para><ref refid="classimage__transport_1_1_simple_publisher_plugin_1a409f2078d4aa3466e843404b88cfe101" kindref="member">publish()</ref> with an extra PublishFn argument</para></listitem></itemizedlist>
</para><para>For access to the parameter server and name remappings, use <ref refid="classimage__transport_1_1_simple_publisher_plugin_1a5f73a993e871242e51671f3cf82d4e1b" kindref="member">nh()</ref>.</para><para><ref refid="classimage__transport_1_1_simple_publisher_plugin_1a46df2b43de62c169d28ac510010d032f" kindref="member">getTopicToAdvertise()</ref> controls the name of the internal communication topic. It defaults to &lt;base topic&gt;/&lt;transport name&gt;. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="150">
        <label>boost::noncopyable</label>
      </node>
      <node id="149">
        <label>image_transport::PublisherPlugin</label>
        <link refid="classimage__transport_1_1_publisher_plugin"/>
        <childnode refid="150" relation="private-inheritance">
        </childnode>
      </node>
      <node id="148">
        <label>image_transport::SimplePublisherPlugin&lt; M &gt;</label>
        <link refid="classimage__transport_1_1_simple_publisher_plugin"/>
        <childnode refid="149" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="153">
        <label>boost::noncopyable</label>
      </node>
      <node id="152">
        <label>image_transport::PublisherPlugin</label>
        <link refid="classimage__transport_1_1_publisher_plugin"/>
        <childnode refid="153" relation="private-inheritance">
        </childnode>
      </node>
      <node id="151">
        <label>image_transport::SimplePublisherPlugin&lt; M &gt;</label>
        <link refid="classimage__transport_1_1_simple_publisher_plugin"/>
        <childnode refid="152" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" line="62" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/include/image_transport/simple_publisher_plugin.h" bodystart="61" bodyend="236"/>
    <listofallmembers>
      <member refid="classimage__transport_1_1_publisher_plugin_1aa79894b876115d4993fad934e200ad48" prot="public" virt="non-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>advertise</name></member>
      <member refid="classimage__transport_1_1_publisher_plugin_1aa05d1be5ed987a1074b480ef9d6d93ea" prot="public" virt="non-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>advertise</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1af9ca774ef9d18a9cf745c92762c00d91" prot="protected" virt="virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>advertiseImpl</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1ad3a066469d5206d45e43080b26540d2f" prot="private" virt="non-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>bindCB</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1adf52732e6fae666b89af0130ccf56a74" prot="private" virt="non-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>bindInternalPublisher</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a4329bd192aa03ec8b44e52c6bbe91a11" prot="protected" virt="virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>connectCallback</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1ac02aac90a3a159c1450a298b63a37425" prot="protected" virt="virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>disconnectCallback</name></member>
      <member refid="classimage__transport_1_1_publisher_plugin_1ac509e7c5ce1a6ce07870968eb1e0a0e3" prot="public" virt="non-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>getLookupName</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a58697b43b16d32531b4f67a7c8709f20" prot="public" virt="virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>getNumSubscribers</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a11ad943c96711dc4a797a2b577ae9ea3" prot="protected" virt="non-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>getPublisher</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a24f9923dbde675f1693b1be252805918" prot="public" virt="virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>getTopic</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a46df2b43de62c169d28ac510010d032f" prot="protected" virt="virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>getTopicToAdvertise</name></member>
      <member refid="classimage__transport_1_1_publisher_plugin_1abe0cd36dc3c170adb6aec8bc6d81d52e" prot="public" virt="pure-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>getTransportName</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a69e45772f0e7f53b10fce68a507ecee7" prot="private" virt="non-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>ImagePublishFn</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a5f73a993e871242e51671f3cf82d4e1b" prot="protected" virt="non-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>nh</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a409f2078d4aa3466e843404b88cfe101" prot="public" virt="virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>publish</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a193470dd32092d13e2284052d4fa359a" prot="protected" virt="pure-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>publish</name></member>
      <member refid="classimage__transport_1_1_publisher_plugin_1a5ec0ad17a8f0ef7b966089c3b8f6ee60" prot="public" virt="virtual" ambiguityscope="image_transport::PublisherPlugin::"><scope>image_transport::SimplePublisherPlugin</scope><name>publish</name></member>
      <member refid="classimage__transport_1_1_publisher_plugin_1add246a58e2cc57ceba3c957f52a95a6d" prot="public" virt="virtual" ambiguityscope="image_transport::PublisherPlugin::"><scope>image_transport::SimplePublisherPlugin</scope><name>publish</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a01bd11cb3ee6b7ce6715a3b57feadf93" prot="protected" virt="non-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>PublishFn</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a62e2d4cce1756530fbf6a323b1a00c59" prot="public" virt="virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>shutdown</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1acc2b8e5b1d487fd75d910ae91b1c67ca" prot="private" virt="non-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>simple_impl_</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a1ca1e6780314d0bb7d9c21832e965005" prot="private" virt="non-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>subscriberCB</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1ad14bbf5e45e654efb7e5275624e8d50b" prot="private" virt="non-virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>SubscriberStatusMemFn</name></member>
      <member refid="classimage__transport_1_1_publisher_plugin_1ae5ad84df1be58ec15cd3cfd645d5097b" prot="public" virt="virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>~PublisherPlugin</name></member>
      <member refid="classimage__transport_1_1_simple_publisher_plugin_1a755bf0cb92fd491596736feae2c8c454" prot="public" virt="virtual"><scope>image_transport::SimplePublisherPlugin</scope><name>~SimplePublisherPlugin</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
