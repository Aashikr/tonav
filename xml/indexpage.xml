<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>tonav</title>
    <detaileddescription>
<para><htmlonly></htmlonly></para><sect1 id="index_1codeapi">
<title>Code API</title>
<para>When transporting images, you should use image_transport&apos;s classes as drop-in replacements for ros::Publisher and ros::Subscriber.<itemizedlist>
<listitem><para><ref refid="classimage__transport_1_1_image_transport" kindref="compound">image_transport::ImageTransport</ref> - use this to create a Publisher or Subscriber</para></listitem><listitem><para><ref refid="classimage__transport_1_1_publisher" kindref="compound">image_transport::Publisher</ref> - manage advertisements for an image topic, using all available transport options</para></listitem><listitem><para><ref refid="classimage__transport_1_1_subscriber" kindref="compound">image_transport::Subscriber</ref> - manage an Image subscription callback using a particular transport</para></listitem></itemizedlist>
</para><para>Camera drivers publish a &quot;camera_info&quot; sibling topic containing important metadata on how to interpret an image for vision applications. image_transport included helper classes to publish (image, info) message pairs and re-synchronize them on the client side:<itemizedlist>
<listitem><para><ref refid="classimage__transport_1_1_camera_publisher" kindref="compound">image_transport::CameraPublisher</ref> - manage advertisements for camera images</para></listitem><listitem><para><ref refid="classimage__transport_1_1_camera_subscriber" kindref="compound">image_transport::CameraSubscriber</ref> - manage a single subscription callback to synchronized image (using any transport) and CameraInfo topics</para></listitem></itemizedlist>
</para><para>For other synchronization or filtering needs, see the low-level filter class:<itemizedlist>
<listitem><para><ref refid="classimage__transport_1_1_subscriber_filter" kindref="compound">image_transport::SubscriberFilter</ref> - a wrapper for <ref refid="classimage__transport_1_1_subscriber" kindref="compound">image_transport::Subscriber</ref> compatible with message_filters</para></listitem></itemizedlist>
</para><sect2 id="index_1writing_plugin">
<title>Writing a plugin</title>
<para>If you are an advanced user implementing your own image transport option, you will need to implement these base-level interfaces:<itemizedlist>
<listitem><para><ref refid="classimage__transport_1_1_publisher_plugin" kindref="compound">image_transport::PublisherPlugin</ref></para></listitem><listitem><para><ref refid="classimage__transport_1_1_subscriber_plugin" kindref="compound">image_transport::SubscriberPlugin</ref></para></listitem></itemizedlist>
</para><para>In the common case that all communication between PublisherPlugin and SubscriberPlugin happens over a single ROS topic using a transport-specific message type, writing the plugins is vastly simplified by using these base classes instead:<itemizedlist>
<listitem><para><ref refid="classimage__transport_1_1_simple_publisher_plugin" kindref="compound">image_transport::SimplePublisherPlugin</ref> - see <ref refid="classimage__transport_1_1_raw_publisher" kindref="compound">image_transport::RawPublisher</ref> for a trivial example</para></listitem><listitem><para><ref refid="classimage__transport_1_1_simple_subscriber_plugin" kindref="compound">image_transport::SimpleSubscriberPlugin</ref> - see <ref refid="classimage__transport_1_1_raw_subscriber" kindref="compound">image_transport::RawSubscriber</ref> for a trivial example</para></listitem></itemizedlist>
</para></sect2>
</sect1>
<sect1 id="index_1rosapi">
<title>ROS API</title>
<sect2 id="index_1pub_sub_rosapi">
<title>Publishers and Subscribers</title>
<para>Because they encapsulate complicated communication behavior, image_transport publisher and subscriber classes have a public ROS API as well as a code API. See the wiki documentation for details.</para><para>Although <ref refid="classimage__transport_1_1_publisher" kindref="compound">image_transport::Publisher</ref> may publish many topics, in all code interfaces you should use only the name of the &quot;base topic.&quot; The image transport classes will figure out the name of the dedicated ROS topic to use for the desired transport. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
