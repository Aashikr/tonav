<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="camera__subscriber_8cpp" kind="file">
    <compoundname>camera_subscriber.cpp</compoundname>
    <includes refid="camera__subscriber_8h" local="yes">image_transport/camera_subscriber.h</includes>
    <includes refid="subscriber__filter_8h" local="yes">image_transport/subscriber_filter.h</includes>
    <includes refid="camera__common_8h" local="yes">image_transport/camera_common.h</includes>
    <includes local="no">message_filters/subscriber.h</includes>
    <includes local="no">message_filters/time_synchronizer.h</includes>
    <incdepgraph>
      <node id="1084">
        <label>image_transport/subscriber_filter.h</label>
        <link refid="subscriber__filter_8h_source"/>
        <childnode refid="1080" relation="include">
        </childnode>
        <childnode refid="1085" relation="include">
        </childnode>
        <childnode refid="1086" relation="include">
        </childnode>
      </node>
      <node id="1093">
        <label>image_transport/loader_fwds.h</label>
        <link refid="loader__fwds_8h_source"/>
      </node>
      <node id="1098">
        <label>message_filters/subscriber.h</label>
      </node>
      <node id="1081">
        <label>sensor_msgs/CameraInfo.h</label>
      </node>
      <node id="1095">
        <label>image_transport/camera_publisher.h</label>
        <link refid="camera__publisher_8h_source"/>
        <childnode refid="1080" relation="include">
        </childnode>
        <childnode refid="1082" relation="include">
        </childnode>
        <childnode refid="1081" relation="include">
        </childnode>
        <childnode refid="1088" relation="include">
        </childnode>
      </node>
      <node id="1088">
        <label>image_transport/single_subscriber_publisher.h</label>
        <link refid="single__subscriber__publisher_8h_source"/>
        <childnode refid="1089" relation="include">
        </childnode>
        <childnode refid="1090" relation="include">
        </childnode>
        <childnode refid="1082" relation="include">
        </childnode>
      </node>
      <node id="1096">
        <label>image_transport/camera_common.h</label>
        <link refid="camera__common_8h_source"/>
        <childnode refid="1097" relation="include">
        </childnode>
      </node>
      <node id="1092">
        <label>stdexcept</label>
      </node>
      <node id="1082">
        <label>sensor_msgs/Image.h</label>
      </node>
      <node id="1097">
        <label>string</label>
      </node>
      <node id="1089">
        <label>boost/noncopyable.hpp</label>
      </node>
      <node id="1083">
        <label>image_transport/transport_hints.h</label>
        <link refid="transport__hints_8h_source"/>
        <childnode refid="1080" relation="include">
        </childnode>
      </node>
      <node id="1086">
        <label>image_transport/image_transport.h</label>
        <link refid="image__transport_8h_source"/>
        <childnode refid="1087" relation="include">
        </childnode>
        <childnode refid="1094" relation="include">
        </childnode>
        <childnode refid="1095" relation="include">
        </childnode>
        <childnode refid="1079" relation="include">
        </childnode>
      </node>
      <node id="1091">
        <label>image_transport/exception.h</label>
        <link refid="exception_8h_source"/>
        <childnode refid="1092" relation="include">
        </childnode>
      </node>
      <node id="1079">
        <label>image_transport/camera_subscriber.h</label>
        <link refid="camera__subscriber_8h_source"/>
        <childnode refid="1080" relation="include">
        </childnode>
        <childnode refid="1081" relation="include">
        </childnode>
        <childnode refid="1082" relation="include">
        </childnode>
        <childnode refid="1083" relation="include">
        </childnode>
      </node>
      <node id="1090">
        <label>boost/function.hpp</label>
      </node>
      <node id="1085">
        <label>message_filters/simple_filter.h</label>
      </node>
      <node id="1094">
        <label>image_transport/subscriber.h</label>
        <link refid="subscriber_8h_source"/>
        <childnode refid="1080" relation="include">
        </childnode>
        <childnode refid="1082" relation="include">
        </childnode>
        <childnode refid="1083" relation="include">
        </childnode>
        <childnode refid="1091" relation="include">
        </childnode>
        <childnode refid="1093" relation="include">
        </childnode>
      </node>
      <node id="1099">
        <label>message_filters/time_synchronizer.h</label>
      </node>
      <node id="1080">
        <label>ros/ros.h</label>
      </node>
      <node id="1087">
        <label>image_transport/publisher.h</label>
        <link refid="publisher_8h_source"/>
        <childnode refid="1080" relation="include">
        </childnode>
        <childnode refid="1082" relation="include">
        </childnode>
        <childnode refid="1088" relation="include">
        </childnode>
        <childnode refid="1091" relation="include">
        </childnode>
        <childnode refid="1093" relation="include">
        </childnode>
      </node>
      <node id="1078">
        <label>/home/travis/catkin_ws/src/image_common/image_transport/src/camera_subscriber.cpp</label>
        <link refid="camera_subscriber.cpp"/>
        <childnode refid="1079" relation="include">
        </childnode>
        <childnode refid="1084" relation="include">
        </childnode>
        <childnode refid="1096" relation="include">
        </childnode>
        <childnode refid="1098" relation="include">
        </childnode>
        <childnode refid="1099" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structimage__transport_1_1_camera_subscriber_1_1_impl" prot="public">image_transport::CameraSubscriber::Impl</innerclass>
    <innernamespace refid="namespaceimage__transport">image_transport</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="camera__subscriber_8cpp_1a59dff9ad7d3a1c3924a7d59e5e0913fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void increment</definition>
        <argsstring>(int *value)</argsstring>
        <name>increment</name>
        <param>
          <type>int *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/catkin_ws/src/image_common/image_transport/src/camera_subscriber.cpp" line="41" column="1" bodyfile="/home/travis/catkin_ws/src/image_common/image_transport/src/camera_subscriber.cpp" bodystart="41" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Software<sp/>License<sp/>Agreement<sp/>(BSD<sp/>License)</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/><sp/>Copyright<sp/>(c)<sp/>2009,<sp/>Willow<sp/>Garage,<sp/>Inc.</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/><sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/><sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*<sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Willow<sp/>Garage<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment">*<sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*<sp/><sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*<sp/><sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS</highlight></codeline>
<codeline lineno="24"><highlight class="comment">*<sp/><sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="25"><highlight class="comment">*<sp/><sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,</highlight></codeline>
<codeline lineno="26"><highlight class="comment">*<sp/><sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*<sp/><sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="28"><highlight class="comment">*<sp/><sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*<sp/><sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="30"><highlight class="comment">*<sp/><sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN</highlight></codeline>
<codeline lineno="31"><highlight class="comment">*<sp/><sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="32"><highlight class="comment">*<sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="33"><highlight class="comment">*********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;image_transport/camera_subscriber.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;image_transport/subscriber_filter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;image_transport/camera_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;message_filters/subscriber.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;message_filters/time_synchronizer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>increment(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>value)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>++(*value);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">image_transport<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="structimage__transport_1_1_camera_subscriber_1_1_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structimage__transport_1_1_camera_subscriber_1_1_impl" kindref="compound">CameraSubscriber::Impl</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="structimage__transport_1_1_camera_subscriber_1_1_impl" kindref="compound">Impl</ref>(uint32_t<sp/>queue_size)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>sync_(queue_size),</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unsubscribed_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>image_received_(0),<sp/>info_received_(0),<sp/>both_received_(0)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>{}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>~<ref refid="structimage__transport_1_1_camera_subscriber_1_1_impl" kindref="compound">Impl</ref>()</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>shutdown();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isValid()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="62"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!unsubscribed_;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>shutdown()</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!unsubscribed_)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unsubscribed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>image_sub_.<ref refid="classimage__transport_1_1_subscriber_filter_1a058bfa4c200c90d7cabd18a2d674084b" kindref="member">unsubscribe</ref>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>info_sub_.unsubscribe();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>checkImagesSynchronized()</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold<sp/>=<sp/>3<sp/>*<sp/>both_received_;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(image_received_<sp/>&gt;<sp/>threshold<sp/>||<sp/>info_received_<sp/>&gt;<sp/>threshold)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ROS_WARN_NAMED(</highlight><highlight class="stringliteral">&quot;sync&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>Can<sp/>suppress<sp/>ros.image_transport.sync<sp/>independent<sp/>of<sp/>anything<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[image_transport]<sp/>Topics<sp/>&apos;%s&apos;<sp/>and<sp/>&apos;%s&apos;<sp/>do<sp/>not<sp/>appear<sp/>to<sp/>be<sp/>synchronized.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;In<sp/>the<sp/>last<sp/>10s:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\tImage<sp/>messages<sp/>received:<sp/><sp/><sp/><sp/><sp/><sp/>%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\tCameraInfo<sp/>messages<sp/>received:<sp/>%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\tSynchronized<sp/>pairs:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_sub_.getTopic().c_str(),<sp/>info_sub_.getTopic().c_str(),</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_received_,<sp/>info_received_,<sp/>both_received_);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>image_received_<sp/>=<sp/>info_received_<sp/>=<sp/>both_received_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="classimage__transport_1_1_subscriber_filter" kindref="compound">SubscriberFilter</ref><sp/>image_sub_;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>message_filters::Subscriber&lt;sensor_msgs::CameraInfo&gt;<sp/>info_sub_;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>message_filters::TimeSynchronizer&lt;sensor_msgs::Image,<sp/>sensor_msgs::CameraInfo&gt;<sp/>sync_;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>unsubscribed_;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>detecting<sp/>when<sp/>the<sp/>topics<sp/>aren&apos;t<sp/>synchronized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>ros::WallTimer<sp/>check_synced_timer_;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>image_received_,<sp/>info_received_,<sp/>both_received_;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">CameraSubscriber::CameraSubscriber(<ref refid="classimage__transport_1_1_image_transport" kindref="compound">ImageTransport</ref>&amp;<sp/>image_it,<sp/>ros::NodeHandle&amp;<sp/>info_nh,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>base_topic,<sp/>uint32_t<sp/>queue_size,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Callback&amp;<sp/>callback,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ros::VoidPtr&amp;<sp/>tracked_object,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classimage__transport_1_1_transport_hints" kindref="compound">TransportHints</ref>&amp;<sp/>transport_hints)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>:<sp/>impl_(new<sp/><ref refid="structimage__transport_1_1_camera_subscriber_1_1_impl" kindref="compound">Impl</ref>(queue_size))</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>explicitly<sp/>remap<sp/>the<sp/>image<sp/>topic<sp/>since<sp/>we<sp/>then<sp/>do<sp/>some<sp/>string<sp/>manipulation<sp/>on<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>figure<sp/>out<sp/>the<sp/>sibling<sp/>camera_info<sp/>topic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>std::string<sp/>image_topic<sp/>=<sp/>info_nh.resolveName(base_topic);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>std::string<sp/>info_topic<sp/>=<sp/>getCameraInfoTopic(image_topic);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>impl_-&gt;image_sub_.subscribe(image_it,<sp/>image_topic,<sp/>queue_size,<sp/>transport_hints);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>impl_-&gt;info_sub_<sp/>.subscribe(info_nh,<sp/>info_topic,<sp/>queue_size,<sp/>transport_hints.getRosHints());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>impl_-&gt;sync_.connectInput(impl_-&gt;image_sub_,<sp/>impl_-&gt;info_sub_);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>for<sp/>Boost.Bind<sp/>here<sp/>is<sp/>kind<sp/>of<sp/>broken</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>impl_-&gt;sync_.registerCallback(boost::bind(callback,<sp/>_1,<sp/>_2));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Complain<sp/>every<sp/>10s<sp/>if<sp/>it<sp/>appears<sp/>that<sp/>the<sp/>image<sp/>and<sp/>info<sp/>topics<sp/>are<sp/>not<sp/>synchronized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>impl_-&gt;image_sub_.registerCallback(boost::bind(increment,<sp/>&amp;impl_-&gt;image_received_));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>impl_-&gt;info_sub_.registerCallback(boost::bind(increment,<sp/>&amp;impl_-&gt;info_received_));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>impl_-&gt;sync_.registerCallback(boost::bind(increment,<sp/>&amp;impl_-&gt;both_received_));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>impl_-&gt;check_synced_timer_<sp/>=<sp/>info_nh.createWallTimer(ros::WallDuration(10.0),</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(&amp;Impl::checkImagesSynchronized,<sp/>impl_.get()));</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="classimage__transport_1_1_camera_subscriber_1a52e7e96c56a813de43e9018cdd4640d4" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classimage__transport_1_1_camera_subscriber_1a52e7e96c56a813de43e9018cdd4640d4" kindref="member">CameraSubscriber::getTopic</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="125"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(impl_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;image_sub_.getTopic();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classimage__transport_1_1_camera_subscriber_1a427737122aa2fa743523aef215f95dfe" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classimage__transport_1_1_camera_subscriber_1a427737122aa2fa743523aef215f95dfe" kindref="member">CameraSubscriber::getInfoTopic</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="131"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(impl_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;info_sub_.getTopic();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="classimage__transport_1_1_camera_subscriber_1a5dca2655dfe5c885ff992693084530b0" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="classimage__transport_1_1_camera_subscriber_1a5dca2655dfe5c885ff992693084530b0" kindref="member">CameraSubscriber::getNumPublishers</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="137"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(impl_)<sp/>return<sp/>std::max(impl_-&gt;image_sub_.getNumPublishers(),<sp/>impl_-&gt;info_sub_.getNumPublishers());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(impl_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;image_sub_.getNumPublishers();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="classimage__transport_1_1_camera_subscriber_1a31dd4cfcdaaf14d304624d78bcdf4a87" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classimage__transport_1_1_camera_subscriber_1a31dd4cfcdaaf14d304624d78bcdf4a87" kindref="member">CameraSubscriber::getTransport</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="145"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(impl_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;image_sub_.getTransport();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classimage__transport_1_1_camera_subscriber_1aa42ceb9613a14d4c2e297674e52ee684" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classimage__transport_1_1_camera_subscriber_1aa42ceb9613a14d4c2e297674e52ee684" kindref="member">CameraSubscriber::shutdown</ref>()</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(impl_)<sp/>impl_-&gt;shutdown();</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">CameraSubscriber::operator<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(impl_<sp/>&amp;&amp;<sp/>impl_-&gt;isValid())<sp/>?<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)1<sp/>:<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">}<sp/></highlight><highlight class="comment">//namespace<sp/>image_transport</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/travis/catkin_ws/src/image_common/image_transport/src/camera_subscriber.cpp"/>
  </compounddef>
</doxygen>
